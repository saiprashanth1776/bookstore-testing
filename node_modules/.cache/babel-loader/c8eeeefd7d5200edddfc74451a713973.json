{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport * as tslib_1 from \"tslib\";\nimport DBInterface from './db-interface';\nimport Errors from './errors';\nvar FCM_VAPID_OBJ_STORE = 'fcm_vapid_object_Store';\nvar DB_NAME = 'fcm_vapid_details_db';\nvar DB_VERSION = 1;\nvar UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;\n\nvar VapidDetailsModel =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(VapidDetailsModel, _super);\n\n  function VapidDetailsModel() {\n    return _super.call(this, DB_NAME, DB_VERSION) || this;\n  }\n  /**\n   * @override\n   * @param {IDBDatabase} db\n   */\n\n\n  VapidDetailsModel.prototype.onDBUpgrade = function (db) {\n    db.createObjectStore(FCM_VAPID_OBJ_STORE, {\n      keyPath: 'swScope'\n    });\n  };\n  /**\n   * Given a service worker scope, this method will look up the vapid key\n   * in indexedDB.\n   */\n\n\n  VapidDetailsModel.prototype.getVapidFromSWScope = function (swScope) {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.openDatabase().then(function (db) {\n      return new Promise(function (resolve, reject) {\n        var transaction = db.transaction([FCM_VAPID_OBJ_STORE]);\n        var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n        var scopeRequest = objectStore.get(swScope);\n\n        scopeRequest.onerror = function () {\n          reject(scopeRequest.error);\n        };\n\n        scopeRequest.onsuccess = function () {\n          var result = scopeRequest.result;\n          var vapidKey = null;\n\n          if (result) {\n            vapidKey = result.vapidKey;\n          }\n\n          resolve(vapidKey);\n        };\n      });\n    });\n  };\n  /**\n   * Save a vapid key against a swScope for later date.\n   */\n\n\n  VapidDetailsModel.prototype.saveVapidDetails = function (swScope, vapidKey) {\n    var _this = this;\n\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));\n    }\n\n    var details = {\n      swScope: swScope,\n      vapidKey: vapidKey\n    };\n    return this.openDatabase().then(function (db) {\n      return new Promise(function (resolve, reject) {\n        var transaction = db.transaction([FCM_VAPID_OBJ_STORE], _this.TRANSACTION_READ_WRITE);\n        var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n        var request = objectStore.put(details);\n\n        request.onerror = function () {\n          reject(request.error);\n        };\n\n        request.onsuccess = function () {\n          resolve();\n        };\n      });\n    });\n  };\n  /**\n   * This method deletes details of the current FCM VAPID key for a SW scope.\n   * Resolves once the scope/vapid details have been deleted and returns the\n   * deleted vapid key.\n   */\n\n\n  VapidDetailsModel.prototype.deleteVapidDetails = function (swScope) {\n    var _this = this;\n\n    return this.getVapidFromSWScope(swScope).then(function (vapidKey) {\n      if (!vapidKey) {\n        throw _this.errorFactory_.create(Errors.codes.DELETE_SCOPE_NOT_FOUND);\n      }\n\n      return _this.openDatabase().then(function (db) {\n        return new Promise(function (resolve, reject) {\n          var transaction = db.transaction([FCM_VAPID_OBJ_STORE], _this.TRANSACTION_READ_WRITE);\n          var objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n          var request = objectStore.delete(swScope);\n\n          request.onerror = function () {\n            reject(request.error);\n          };\n\n          request.onsuccess = function () {\n            if (request.result === 0) {\n              reject(_this.errorFactory_.create(Errors.codes.FAILED_DELETE_VAPID_KEY));\n              return;\n            }\n\n            resolve(vapidKey);\n          };\n        });\n      });\n    });\n  };\n\n  return VapidDetailsModel;\n}(DBInterface);\n\nexport default VapidDetailsModel;","map":{"version":3,"sources":["../src/models/vapid-details-model.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA;;;AAEA,OAAO,WAAP,MAAwB,gBAAxB;AACA,OAAO,MAAP,MAAmB,UAAnB;AAEA,IAAM,mBAAmB,GAAG,wBAA5B;AACA,IAAM,OAAO,GAAG,sBAAhB;AACA,IAAM,UAAU,GAAG,CAAnB;AACA,IAAM,4BAA4B,GAAG,EAArC;;AAEA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,OAAA,CAAA,SAAA,CAAA,iBAAA,EAAA,MAAA;;AAC7C,WAAA,iBAAA,GAAA;WACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,EAAe,UAAf,KAA0B,I;AAC3B;AAED;;;;;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,EAAZ,EAAc;AACZ,IAAA,EAAE,CAAC,iBAAH,CAAqB,mBAArB,EAA0C;AACxC,MAAA,OAAO,EAAE;AAD+B,KAA1C;AAGD,GAJD;AAMA;;;;;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,OAApB,EAAmC;AACjC,QAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,CAAC,MAAR,KAAmB,CAAtD,EAAyD;AACvD,aAAO,OAAO,CAAC,MAAR,CAAe,KAAK,aAAL,CAAmB,MAAnB,CAA0B,MAAM,CAAC,KAAP,CAAa,SAAvC,CAAf,CAAP;AACD;;AAED,WAAO,KAAK,YAAL,GAAoB,IAApB,CAAyB,UAAA,EAAA,EAAE;AAChC,aAAO,IAAI,OAAJ,CAAwB,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC7C,YAAM,WAAW,GAAG,EAAE,CAAC,WAAH,CAAe,CAAC,mBAAD,CAAf,CAApB;AACA,YAAM,WAAW,GAAG,WAAW,CAAC,WAAZ,CAAwB,mBAAxB,CAApB;AACA,YAAM,YAAY,GAAG,WAAW,CAAC,GAAZ,CAAgB,OAAhB,CAArB;;AACA,QAAA,YAAY,CAAC,OAAb,GAAuB,YAAA;AACrB,UAAA,MAAM,CAAC,YAAY,CAAC,KAAd,CAAN;AACD,SAFD;;AAIA,QAAA,YAAY,CAAC,SAAb,GAAyB,YAAA;AACvB,cAAI,MAAM,GAAG,YAAY,CAAC,MAA1B;AACA,cAAI,QAAQ,GAAG,IAAf;;AACA,cAAI,MAAJ,EAAY;AACV,YAAA,QAAQ,GAAG,MAAM,CAAC,QAAlB;AACD;;AACD,UAAA,OAAO,CAAC,QAAD,CAAP;AACD,SAPD;AAQD,OAhBM,CAAP;AAiBD,KAlBM,CAAP;AAmBD,GAxBD;AA0BA;;;;;AAGA,EAAA,iBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,OAAjB,EAAkC,QAAlC,EAAsD;AAAtD,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,CAAC,MAAR,KAAmB,CAAtD,EAAyD;AACvD,aAAO,OAAO,CAAC,MAAR,CAAe,KAAK,aAAL,CAAmB,MAAnB,CAA0B,MAAM,CAAC,KAAP,CAAa,SAAvC,CAAf,CAAP;AACD;;AAED,QAAI,QAAQ,KAAK,IAAb,IAAqB,QAAQ,CAAC,MAAT,KAAoB,4BAA7C,EAA2E;AACzE,aAAO,OAAO,CAAC,MAAR,CACL,KAAK,aAAL,CAAmB,MAAnB,CAA0B,MAAM,CAAC,KAAP,CAAa,aAAvC,CADK,CAAP;AAGD;;AAED,QAAM,OAAO,GAAG;AACd,MAAA,OAAO,EAAE,OADK;AAEd,MAAA,QAAQ,EAAE;AAFI,KAAhB;AAKA,WAAO,KAAK,YAAL,GAAoB,IAApB,CAAyB,UAAA,EAAA,EAAE;AAChC,aAAO,IAAI,OAAJ,CAAkB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACvC,YAAM,WAAW,GAAG,EAAE,CAAC,WAAH,CAClB,CAAC,mBAAD,CADkB,EAElB,KAAI,CAAC,sBAFa,CAApB;AAIA,YAAM,WAAW,GAAG,WAAW,CAAC,WAAZ,CAAwB,mBAAxB,CAApB;AACA,YAAM,OAAO,GAAG,WAAW,CAAC,GAAZ,CAAgB,OAAhB,CAAhB;;AACA,QAAA,OAAO,CAAC,OAAR,GAAkB,YAAA;AAChB,UAAA,MAAM,CAAC,OAAO,CAAC,KAAT,CAAN;AACD,SAFD;;AAGA,QAAA,OAAO,CAAC,SAAR,GAAoB,YAAA;AAClB,UAAA,OAAO;AACR,SAFD;AAGD,OAbM,CAAP;AAcD,KAfM,CAAP;AAgBD,GAhCD;AAkCA;;;;;;;AAKA,EAAA,iBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,OAAnB,EAAkC;AAAlC,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,KAAK,mBAAL,CAAyB,OAAzB,EAAkC,IAAlC,CAAuC,UAAA,QAAA,EAAQ;AACpD,UAAI,CAAC,QAAL,EAAe;AACb,cAAM,KAAI,CAAC,aAAL,CAAmB,MAAnB,CAA0B,MAAM,CAAC,KAAP,CAAa,sBAAvC,CAAN;AACD;;AAED,aAAO,KAAI,CAAC,YAAL,GAAoB,IAApB,CAAyB,UAAA,EAAA,EAAE;AAChC,eAAO,IAAI,OAAJ,CAAwB,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC7C,cAAM,WAAW,GAAG,EAAE,CAAC,WAAH,CAClB,CAAC,mBAAD,CADkB,EAElB,KAAI,CAAC,sBAFa,CAApB;AAIA,cAAM,WAAW,GAAG,WAAW,CAAC,WAAZ,CAAwB,mBAAxB,CAApB;AACA,cAAM,OAAO,GAAG,WAAW,CAAC,MAAZ,CAAmB,OAAnB,CAAhB;;AACA,UAAA,OAAO,CAAC,OAAR,GAAkB,YAAA;AAChB,YAAA,MAAM,CAAC,OAAO,CAAC,KAAT,CAAN;AACD,WAFD;;AAGA,UAAA,OAAO,CAAC,SAAR,GAAoB,YAAA;AAClB,gBAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,cAAA,MAAM,CACJ,KAAI,CAAC,aAAL,CAAmB,MAAnB,CAA0B,MAAM,CAAC,KAAP,CAAa,uBAAvC,CADI,CAAN;AAGA;AACD;;AAED,YAAA,OAAO,CAAC,QAAD,CAAP;AACD,WATD;AAUD,SApBM,CAAP;AAqBD,OAtBM,CAAP;AAuBD,KA5BM,CAAP;AA6BD,GA9BD;;AA+BF,SAAA,iBAAA;AAAC,CAtHD,CAA+C,WAA/C,CAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport DBInterface from './db-interface';\nimport Errors from './errors';\n\nconst FCM_VAPID_OBJ_STORE = 'fcm_vapid_object_Store';\nconst DB_NAME = 'fcm_vapid_details_db';\nconst DB_VERSION = 1;\nconst UNCOMPRESSED_PUBLIC_KEY_SIZE = 65;\n\nexport default class VapidDetailsModel extends DBInterface {\n  constructor() {\n    super(DB_NAME, DB_VERSION);\n  }\n\n  /**\n   * @override\n   * @param {IDBDatabase} db\n   */\n  onDBUpgrade(db) {\n    db.createObjectStore(FCM_VAPID_OBJ_STORE, {\n      keyPath: 'swScope'\n    });\n  }\n\n  /**\n   * Given a service worker scope, this method will look up the vapid key\n   * in indexedDB.\n   */\n  getVapidFromSWScope(swScope: string): Promise<Uint8Array> {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.openDatabase().then(db => {\n      return new Promise<Uint8Array>((resolve, reject) => {\n        const transaction = db.transaction([FCM_VAPID_OBJ_STORE]);\n        const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n        const scopeRequest = objectStore.get(swScope);\n        scopeRequest.onerror = () => {\n          reject(scopeRequest.error);\n        };\n\n        scopeRequest.onsuccess = () => {\n          let result = scopeRequest.result;\n          let vapidKey = null;\n          if (result) {\n            vapidKey = result.vapidKey;\n          }\n          resolve(vapidKey);\n        };\n      });\n    });\n  }\n\n  /**\n   * Save a vapid key against a swScope for later date.\n   */\n  saveVapidDetails(swScope: string, vapidKey: Uint8Array): Promise<void> {\n    if (typeof swScope !== 'string' || swScope.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    if (vapidKey === null || vapidKey.length !== UNCOMPRESSED_PUBLIC_KEY_SIZE) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY)\n      );\n    }\n\n    const details = {\n      swScope: swScope,\n      vapidKey: vapidKey\n    };\n\n    return this.openDatabase().then(db => {\n      return new Promise<void>((resolve, reject) => {\n        const transaction = db.transaction(\n          [FCM_VAPID_OBJ_STORE],\n          this.TRANSACTION_READ_WRITE\n        );\n        const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n        const request = objectStore.put(details);\n        request.onerror = () => {\n          reject(request.error);\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      });\n    });\n  }\n\n  /**\n   * This method deletes details of the current FCM VAPID key for a SW scope.\n   * Resolves once the scope/vapid details have been deleted and returns the\n   * deleted vapid key.\n   */\n  deleteVapidDetails(swScope: string): Promise<Uint8Array> {\n    return this.getVapidFromSWScope(swScope).then(vapidKey => {\n      if (!vapidKey) {\n        throw this.errorFactory_.create(Errors.codes.DELETE_SCOPE_NOT_FOUND);\n      }\n\n      return this.openDatabase().then(db => {\n        return new Promise<Uint8Array>((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_VAPID_OBJ_STORE],\n            this.TRANSACTION_READ_WRITE\n          );\n          const objectStore = transaction.objectStore(FCM_VAPID_OBJ_STORE);\n          const request = objectStore.delete(swScope);\n          request.onerror = () => {\n            reject(request.error);\n          };\n          request.onsuccess = () => {\n            if (request.result === 0) {\n              reject(\n                this.errorFactory_.create(Errors.codes.FAILED_DELETE_VAPID_KEY)\n              );\n              return;\n            }\n\n            resolve(vapidKey);\n          };\n        });\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}