{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar Index_1 = require(\"./Index\");\n\nvar Node_1 = require(\"../Node\");\n\nvar util_1 = require(\"../../util/util\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar __EMPTY_NODE;\n\nvar KeyIndex =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(KeyIndex, _super);\n\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function () {\n      return __EMPTY_NODE;\n    },\n    set: function (val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @inheritDoc\n   */\n\n  KeyIndex.prototype.compare = function (a, b) {\n    return util_1.nameCompare(a.name, b.name);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw util_2.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  KeyIndex.prototype.minPost = function () {\n    return Node_1.NamedNode.MIN;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new Node_1.NamedNode(util_1.MAX_NAME, __EMPTY_NODE);\n  };\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n\n\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    util_2.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new Node_1.NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n\n\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n\n  return KeyIndex;\n}(Index_1.Index);\n\nexports.KeyIndex = KeyIndex;\nexports.KEY_INDEX = new KeyIndex();","map":{"version":3,"sources":["../src/core/snap/indexes/KeyIndex.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAGA,IAAI,YAAJ;;AAEA,IAAA,QAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8B,EAAA,OAAA,CAAA,SAAA,CAAA,QAAA,EAAA,MAAA;;AAA9B,WAAA,QAAA,GAAA;;AAoEC;;AAnEC,EAAA,MAAA,CAAA,cAAA,CAAW,QAAX,EAAW,cAAX,EAAuB;SAAvB,YAAA;AACE,aAAO,YAAP;AACD,KAFsB;SAIvB,UAAwB,GAAxB,EAA2B;AACzB,MAAA,YAAY,GAAG,GAAf;AACD,KANsB;oBAAA;;AAAA,GAAvB;AAQA;;;;AAGA,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,CAAR,EAAsB,CAAtB,EAAkC;AAChC,WAAO,MAAA,CAAA,WAAA,CAAY,CAAC,CAAC,IAAd,EAAoB,CAAC,CAAC,IAAtB,CAAP;AACD,GAFD;AAIA;;;;;AAGA,EAAA,QAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,IAAZ,EAAsB;AACpB;AACA;AACA,UAAM,MAAA,CAAA,cAAA,CAAe,iDAAf,CAAN;AACD,GAJD;AAMA;;;;;AAGA,EAAA,QAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,OAApB,EAAmC,OAAnC,EAAgD;AAC9C,WAAO,KAAP,CAD8C,CAChC;AACf,GAFD;AAIA;;;;;AAGA,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAQ,MAAA,CAAA,SAAA,CAAkB,GAA1B;AACD,GAFD;AAIA;;;;;AAGA,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE;AACA;AACA,WAAO,IAAI,MAAA,CAAA,SAAJ,CAAc,MAAA,CAAA,QAAd,EAAwB,YAAxB,CAAP;AACD,GAJD;AAMA;;;;;;;AAKA,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,UAAT,EAA6B,IAA7B,EAAyC;AACvC,IAAA,MAAA,CAAA,MAAA,CACE,OAAO,UAAP,KAAsB,QADxB,EAEE,8CAFF,EADuC,CAKvC;;AACA,WAAO,IAAI,MAAA,CAAA,SAAJ,CAAc,UAAd,EAA0B,YAA1B,CAAP;AACD,GAPD;AASA;;;;;AAGA,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,MAAP;AACD,GAFD;;AAGF,SAAA,QAAA;AAAC,CApED,CAA8B,OAAA,CAAA,KAA9B,CAAA;;AAAa,OAAA,CAAA,QAAA,GAAA,QAAA;AAsEA,OAAA,CAAA,SAAA,GAAY,IAAI,QAAJ,EAAZ","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n"]},"metadata":{},"sourceType":"script"}