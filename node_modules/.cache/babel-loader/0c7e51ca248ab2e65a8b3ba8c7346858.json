{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar app_1 = require(\"@firebase/app\");\n\nvar Database_1 = require(\"./src/api/Database\");\n\nexports.Database = Database_1.Database;\n\nvar Query_1 = require(\"./src/api/Query\");\n\nexports.Query = Query_1.Query;\n\nvar Reference_1 = require(\"./src/api/Reference\");\n\nexports.Reference = Reference_1.Reference;\n\nvar util_1 = require(\"./src/core/util/util\");\n\nexports.enableLogging = util_1.enableLogging;\n\nvar RepoManager_1 = require(\"./src/core/RepoManager\");\n\nvar INTERNAL = require(\"./src/api/internal\");\n\nvar TEST_ACCESS = require(\"./src/api/test_access\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar ServerValue = Database_1.Database.ServerValue;\nexports.ServerValue = ServerValue;\n\nfunction registerDatabase(instance) {\n  // Register the Database Service with the 'firebase' namespace.\n  var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) {\n    return RepoManager_1.RepoManager.getInstance().databaseFromApp(app, url);\n  }, // firebase.database namespace properties\n  {\n    Reference: Reference_1.Reference,\n    Query: Query_1.Query,\n    Database: Database_1.Database,\n    enableLogging: util_1.enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }, null, true);\n\n  if (util_2.isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nexports.registerDatabase = registerDatabase;\nregisterDatabase(app_1.default);\n\nvar DataSnapshot_1 = require(\"./src/api/DataSnapshot\");\n\nexports.DataSnapshot = DataSnapshot_1.DataSnapshot;\n\nvar onDisconnect_1 = require(\"./src/api/onDisconnect\");\n\nexports.OnDisconnect = onDisconnect_1.OnDisconnect;","map":{"version":3,"sources":["../index.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,KAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAGA,IAAA,UAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAuCS,OAAA,CAAA,QAAA,GAvCA,UAAA,CAAA,QAuCA;;AAtCT,IAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAsCmB,OAAA,CAAA,KAAA,GAtCV,OAAA,CAAA,KAsCU;;AArCnB,IAAA,WAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAqC0B,OAAA,CAAA,SAAA,GArCjB,WAAA,CAAA,SAqCiB;;AApC1B,IAAA,MAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAoCqC,OAAA,CAAA,aAAA,GApC5B,MAAA,CAAA,aAoC4B;;AAnCrC,IAAA,aAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAGA,IAAM,WAAW,GAAG,UAAA,CAAA,QAAA,CAAS,WAA7B;AA6BoD,OAAA,CAAA,WAAA,GAAA,WAAA;;AA3BpD,SAAA,gBAAA,CAAiC,QAAjC,EAA4D;AAC1D;AACA,MAAM,SAAS,GAAI,QAA+B,CAAC,QAAhC,CAAyC,eAAzC,CACjB,UADiB,EAEjB,UAAC,GAAD,EAAM,MAAN,EAAc,GAAd,EAAiB;AAAK,WAAA,aAAA,CAAA,WAAA,CAAY,WAAZ,GAA0B,eAA1B,CAA0C,GAA1C,EAAA,GAAA,CAAA;AAAmD,GAFxD,EAGjB;AACA;AACE,IAAA,SAAS,EAAA,WAAA,CAAA,SADX;AAEE,IAAA,KAAK,EAAA,OAAA,CAAA,KAFP;AAGE,IAAA,QAAQ,EAAA,UAAA,CAAA,QAHV;AAIE,IAAA,aAAa,EAAA,MAAA,CAAA,aAJf;AAKE,IAAA,QAAQ,EAAA,QALV;AAME,IAAA,WAAW,EAAA,WANb;AAOE,IAAA,WAAW,EAAA;AAPb,GAJiB,EAajB,IAbiB,EAcjB,IAdiB,CAAnB;;AAiBA,MAAI,MAAA,CAAA,SAAA,EAAJ,EAAiB;AACf,IAAA,MAAM,CAAC,OAAP,GAAiB,SAAjB;AACD;AACF;;AAtBD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAwBA,gBAAgB,CAAC,KAAA,CAAA,OAAD,CAAhB;;AAKA,IAAA,cAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAAS,OAAA,CAAA,YAAA,GAAA,cAAA,CAAA,YAAA;;AACT,IAAA,cAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAAS,OAAA,CAAA,YAAA,GAAA,cAAA,CAAA,YAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerService(\n    'database',\n    (app, unused, url) => RepoManager.getInstance().databaseFromApp(app, url),\n    // firebase.database namespace properties\n    {\n      Reference,\n      Query,\n      Database,\n      enableLogging,\n      INTERNAL,\n      ServerValue,\n      TEST_ACCESS\n    },\n    null,\n    true\n  );\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}