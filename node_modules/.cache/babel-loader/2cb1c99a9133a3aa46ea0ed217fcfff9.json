{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"../core/util/util\");\n\nvar CountedSet_1 = require(\"../core/util/CountedSet\");\n\nvar StatsManager_1 = require(\"../core/stats/StatsManager\");\n\nvar PacketReceiver_1 = require(\"./polling/PacketReceiver\");\n\nvar Constants_1 = require(\"./Constants\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar util_3 = require(\"@firebase/util\"); // URL query parameters associated with longpolling\n\n\nexports.FIREBASE_LONGPOLL_START_PARAM = 'start';\nexports.FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexports.FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexports.FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexports.FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexports.FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexports.FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexports.FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\n\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\n\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\n\nvar BrowserPollConnection =\n/** @class */\nfunction () {\n  /**\n   * @param {string} connId An identifier for this connection, used for logging\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = util_1.logWrapper(connId);\n    this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);\n\n    this.urlFn = function (params) {\n      return repoInfo.connectionURL(Constants_1.LONG_POLLING, params);\n    };\n  }\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n\n\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver_1.PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n\n      _this.onClosed_();\n\n      _this.connectTimeoutTimer_ = null;\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    util_1.executeWhenDOMReady(function () {\n      if (_this.isClosed_) return; //Set up a callback that gets triggered once a connection is set up.\n\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var command = args[0],\n            arg1 = args[1],\n            arg2 = args[2],\n            arg3 = args[3],\n            arg4 = args[4];\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) return; // we closed the connection.\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command == exports.FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === exports.FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var pN = args[0],\n            data = args[1];\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      var urlParams = {};\n      urlParams[exports.FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) urlParams[exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;\n\n      if (_this.transportSessionId) {\n        urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n\n      if (_this.lastSessionId) {\n        urlParams[Constants_1.LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n\n      if (!util_3.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {\n        urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;\n      }\n\n      var connectURL = _this.urlFn(urlParams);\n\n      _this.log_('Connecting via long-poll to ' + connectURL);\n\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n\n\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n\n\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n\n\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  }; // Static method, use string literal so it can be accessed in a generic way\n\n\n  BrowserPollConnection.isAvailable = function () {\n    // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n    // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n    return BrowserPollConnection.forceAllow_ || !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !util_1.isChromeExtensionContentScript() && !util_1.isWindowsStoreApp() && !util_3.isNodeSdk();\n  };\n  /**\n   * No-op for polling\n   */\n\n\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n\n\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n\n\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n\n\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n\n\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = util_2.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    var base64data = util_2.base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = util_1.splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n\n\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (util_3.isNodeSdk()) return;\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n\n\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = util_2.stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n\n  return BrowserPollConnection;\n}();\n\nexports.BrowserPollConnection = BrowserPollConnection;\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\n\nvar FirebaseIFrameScriptHolder =\n/** @class */\nfunction () {\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    /**\n     * @type {CountedSet.<number, number>}\n     */\n\n    this.outstandingRequests = new CountedSet_1.CountedSet(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!util_3.isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = util_1.LUIDGenerator();\n      window[exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[exports.FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      var iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        util_1.log('frame writing exception');\n\n        if (e.stack) {\n          util_1.log(e.stack);\n        }\n\n        util_1.log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n\n\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          util_1.log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n    } else if (iframe.document) {\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this; //Mark this iframe as dead, so no new requests are sent.\n\n\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    if (util_3.isNodeSdk() && this.myID) {\n      var urlParams = {};\n      urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n      urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      var theURL = this.urlFn(urlParams);\n      FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\n    } // Protect from being called recursively.\n\n\n    var onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  };\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      var curDataString = '';\n      var i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + exports.FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this; //remember that we sent this request.\n\n\n    this.outstandingRequests.add(serial, 1);\n\n    var doNewRequest = function () {\n      _this.outstandingRequests.remove(serial);\n\n      _this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    var readyStateCB = function () {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  };\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n\n    if (util_3.isNodeSdk()) {\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) return;\n\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url;\n\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            var rstate = newScript_1.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript_1.onerror = function () {\n            util_1.log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n\n            _this.close();\n          };\n\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n\n  return FirebaseIFrameScriptHolder;\n}();\n\nexports.FirebaseIFrameScriptHolder = FirebaseIFrameScriptHolder;","map":{"version":3,"sources":["../src/realtime/BrowserPollConnection.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { CountedSet } from '../core/util/CountedSet';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify } from '@firebase/util';\nimport { isNodeSdk } from '@firebase/util';\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: any[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param {string} connId An identifier for this connection, used for logging\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: Object) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) return;\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) return; // we closed the connection.\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command == FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1;\n            this.password = arg2;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN, data);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier)\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (\n        !isNodeSdk() &&\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n    // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n    return (\n      BrowserPollConnection.forceAllow_ ||\n      (!BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp() &&\n        !isNodeSdk())\n    );\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: Object) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) return;\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: any) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  /**\n   * @type {CountedSet.<number, number>}\n   */\n  outstandingRequests = new CountedSet<number, number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: { seg: number; ts: number; d: any }[] = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: any[]) => void;\n  onMessageCB: (...args: any[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: any[]) => void,\n    onMessageCB: (...args: any[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      (window as any)[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      (window as any)[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      (iframe as any).doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      (iframe as any).doc = iframe.contentWindow.document; // Internet Explorer\n    } else if ((iframe as any).document) {\n      (iframe as any).doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    if (isNodeSdk() && this.myID) {\n      const urlParams: { [k: string]: string } = {};\n      urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      const theURL = this.urlFn(urlParams);\n      (FirebaseIFrameScriptHolder as any).nodeRestRequest(theURL);\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: any) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial, 1);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.remove(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) return;\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          newScript.onload = (newScript as any).onreadystatechange = function() {\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}