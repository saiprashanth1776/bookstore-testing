{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * There seems to have been a bug in the messaging SDK versions <= 4.9.x\n * where the IndexedDB model was using a database name of 'undefined'.\n *\n * In 4.10.x we changed the model implementation, but kept the database\n * name as it should have been. This however introduced an issue where\n * two tokens were pointing to the same underlying PushSubscription.\n *\n * This code will look for the undefined database and delete any of the\n * underlying tokens.\n */\nimport IIDModel from '../models/iid-model';\nvar OLD_DB_NAME = 'undefined';\nvar OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nfunction handleDb(db) {\n  if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n    // We found a database with the name 'undefined', but our expected object\n    // store isn't defined.\n    return;\n  }\n\n  var transaction = db.transaction(OLD_OBJECT_STORE_NAME);\n  var objectStore = transaction.objectStore(OLD_OBJECT_STORE_NAME);\n  var iidModel = new IIDModel();\n  var openCursorRequest = objectStore.openCursor();\n\n  openCursorRequest.onerror = function (event) {\n    // NOOP - Nothing we can do.\n    console.warn('Unable to cleanup old IDB.', event);\n  };\n\n  openCursorRequest.onsuccess = function () {\n    var cursor = openCursorRequest.result;\n\n    if (cursor) {\n      // cursor.value contains the current record being iterated through\n      // this is where you'd do something with the result\n      var tokenDetails = cursor.value;\n      iidModel.deleteToken(tokenDetails.fcmSenderId, tokenDetails.fcmToken, tokenDetails.fcmPushSet);\n      cursor.continue();\n    } else {\n      db.close();\n      indexedDB.deleteDatabase(OLD_DB_NAME);\n    }\n  };\n}\n\nfunction cleanV1() {\n  var request = indexedDB.open(OLD_DB_NAME);\n\n  request.onerror = function (event) {// NOOP - Nothing we can do.\n  };\n\n  request.onsuccess = function (event) {\n    var db = request.result;\n    handleDb(db);\n  };\n}\n\nexport { cleanV1 };","map":{"version":3,"sources":["../src/models/clean-v1-undefined.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA,OAAO,QAAP,MAAqB,qBAArB;AAEA,IAAM,WAAW,GAAG,WAApB;AACA,IAAM,qBAAqB,GAAG,wBAA9B;;AAEA,SAAA,QAAA,CAAkB,EAAlB,EAAiC;AAC/B,MAAI,CAAC,EAAE,CAAC,gBAAH,CAAoB,QAApB,CAA6B,qBAA7B,CAAL,EAA0D;AACxD;AACA;AACA;AACD;;AAED,MAAM,WAAW,GAAG,EAAE,CAAC,WAAH,CAAe,qBAAf,CAApB;AACA,MAAM,WAAW,GAAG,WAAW,CAAC,WAAZ,CAAwB,qBAAxB,CAApB;AAEA,MAAM,QAAQ,GAAG,IAAI,QAAJ,EAAjB;AAEA,MAAM,iBAAiB,GAAe,WAAW,CAAC,UAAZ,EAAtC;;AACA,EAAA,iBAAiB,CAAC,OAAlB,GAA4B,UAAA,KAAA,EAAK;AAC/B;AACA,IAAA,OAAO,CAAC,IAAR,CAAa,4BAAb,EAA2C,KAA3C;AACD,GAHD;;AAKA,EAAA,iBAAiB,CAAC,SAAlB,GAA8B,YAAA;AAC5B,QAAM,MAAM,GAAG,iBAAiB,CAAC,MAAjC;;AACA,QAAI,MAAJ,EAAY;AACV;AACA;AACA,UAAM,YAAY,GAAG,MAAM,CAAC,KAA5B;AAEA,MAAA,QAAQ,CAAC,WAAT,CACE,YAAY,CAAC,WADf,EAEE,YAAY,CAAC,QAFf,EAGE,YAAY,CAAC,UAHf;AAMA,MAAA,MAAM,CAAC,QAAP;AACD,KAZD,MAYO;AACL,MAAA,EAAE,CAAC,KAAH;AACA,MAAA,SAAS,CAAC,cAAV,CAAyB,WAAzB;AACD;AACF,GAlBD;AAmBD;;AAED,SAAA,OAAA,GAAA;AACE,MAAM,OAAO,GAAqB,SAAS,CAAC,IAAV,CAAe,WAAf,CAAlC;;AACA,EAAA,OAAO,CAAC,OAAR,GAAkB,UAAS,KAAT,EAAc,CAC9B;AACD,GAFD;;AAGA,EAAA,OAAO,CAAC,SAAR,GAAoB,UAAS,KAAT,EAAc;AAChC,QAAM,EAAE,GAAG,OAAO,CAAC,MAAnB;AACA,IAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAHD;AAID;;AAED,SAAS,OAAT","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * There seems to have been a bug in the messaging SDK versions <= 4.9.x\n * where the IndexedDB model was using a database name of 'undefined'.\n *\n * In 4.10.x we changed the model implementation, but kept the database\n * name as it should have been. This however introduced an issue where\n * two tokens were pointing to the same underlying PushSubscription.\n *\n * This code will look for the undefined database and delete any of the\n * underlying tokens.\n */\n\nimport IIDModel from '../models/iid-model';\n\nconst OLD_DB_NAME = 'undefined';\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nfunction handleDb(db: IDBDatabase) {\n  if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n    // We found a database with the name 'undefined', but our expected object\n    // store isn't defined.\n    return;\n  }\n\n  const transaction = db.transaction(OLD_OBJECT_STORE_NAME);\n  const objectStore = transaction.objectStore(OLD_OBJECT_STORE_NAME);\n\n  const iidModel = new IIDModel();\n\n  const openCursorRequest: IDBRequest = objectStore.openCursor();\n  openCursorRequest.onerror = event => {\n    // NOOP - Nothing we can do.\n    console.warn('Unable to cleanup old IDB.', event);\n  };\n\n  openCursorRequest.onsuccess = () => {\n    const cursor = openCursorRequest.result;\n    if (cursor) {\n      // cursor.value contains the current record being iterated through\n      // this is where you'd do something with the result\n      const tokenDetails = cursor.value;\n\n      iidModel.deleteToken(\n        tokenDetails.fcmSenderId,\n        tokenDetails.fcmToken,\n        tokenDetails.fcmPushSet\n      );\n\n      cursor.continue();\n    } else {\n      db.close();\n      indexedDB.deleteDatabase(OLD_DB_NAME);\n    }\n  };\n}\n\nfunction cleanV1() {\n  const request: IDBOpenDBRequest = indexedDB.open(OLD_DB_NAME);\n  request.onerror = function(event) {\n    // NOOP - Nothing we can do.\n  };\n  request.onsuccess = function(event) {\n    const db = request.result;\n    handleDb(db);\n  };\n}\n\nexport { cleanV1 };\n"]},"metadata":{},"sourceType":"module"}