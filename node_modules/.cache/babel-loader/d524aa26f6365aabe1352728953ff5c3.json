{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"../../core/util/util\");\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\n\n\nvar PacketReceiver =\n/** @class */\nfunction () {\n  /**\n   * @param onMessage_\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n\n\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n\n    this.pendingResponses[requestNum] = data;\n\n    var _loop_1 = function () {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n\n      var _loop_2 = function (i) {\n        if (toProcess[i]) {\n          util_1.exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n\n        return \"break\";\n      }\n\n      this_1.currentResponseNum++;\n    };\n\n    var this_1 = this;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  return PacketReceiver;\n}();\n\nexports.PacketReceiver = PacketReceiver;","map":{"version":3,"sources":["../src/realtime/polling/PacketReceiver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,MAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAEA;;;;;;;AAKA,IAAA,cAAA;AAAA;AAAA,YAAA;AAME;;;AAGA,WAAA,cAAA,CAAoB,UAApB,EAAmD;AAA/B,SAAA,UAAA,GAAA,UAAA;AARpB,SAAA,gBAAA,GAA0B,EAA1B;AACA,SAAA,kBAAA,GAAqB,CAArB;AACA,SAAA,kBAAA,GAAqB,CAAC,CAAtB;AACA,SAAA,OAAA,GAA+B,IAA/B;AAKuD;;AAEvD,EAAA,cAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAW,WAAX,EAAgC,QAAhC,EAAoD;AAClD,SAAK,kBAAL,GAA0B,WAA1B;AACA,SAAK,OAAL,GAAe,QAAf;;AACA,QAAI,KAAK,kBAAL,GAA0B,KAAK,kBAAnC,EAAuD;AACrD,WAAK,OAAL;AACA,WAAK,OAAL,GAAe,IAAf;AACD;AACF,GAPD;AASA;;;;;;;;;AAOA,EAAA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,UAAf,EAAmC,IAAnC,EAA8C;AAA9C,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,gBAAL,CAAsB,UAAtB,IAAoC,IAApC;;;AAEE,UAAM,SAAS,GAAG,MAAA,CAAK,gBAAL,CAAsB,MAAA,CAAK,kBAA3B,CAAlB;AACA,aAAO,MAAA,CAAK,gBAAL,CAAsB,MAAA,CAAK,kBAA3B,CAAP;;8BACS,C,EAAC;AACR,YAAI,SAAS,CAAC,CAAD,CAAb,EAAkB;AAChB,UAAA,MAAA,CAAA,cAAA,CAAe,YAAA;AACb,YAAA,KAAI,CAAC,UAAL,CAAgB,SAAS,CAAC,CAAD,CAAzB;AACD,WAFD;AAGD;AACF,O;;AAND,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,EAAE,CAAxC,EAAyC;gBAAhC,C;AAMR;;AACD,UAAI,MAAA,CAAK,kBAAL,KAA4B,MAAA,CAAK,kBAArC,EAAyD;AACvD,YAAI,MAAA,CAAK,OAAT,EAAkB;AAChB,UAAA,MAAA,CAAK,OAAL;AACA,UAAA,MAAA,CAAK,OAAL,GAAe,IAAf;AACD;;;AAEF;;AACD,MAAA,MAAA,CAAK,kBAAL;AACD,K;;;;AAlBD,WAAO,KAAK,gBAAL,CAAsB,KAAK,kBAA3B,CAAP,EAAqD;;;;AAkBpD;AACF,GArBD;;AAsBF,SAAA,cAAA;AAAC,CAjDD,EAAA;;AAAa,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: any[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: Object) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: any[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}