{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\n\nvar Change =\n/** @class */\nfunction () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n\n\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n\n\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n\n\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n\n\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n\n\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }; //event types\n\n  /** Event type for a child added */\n\n\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n\n  Change.VALUE = 'value';\n  return Change;\n}();\n\nexports.Change = Change;","map":{"version":3,"sources":["../src/core/view/Change.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;AASA,IAAA,MAAA;AAAA;AAAA,YAAA;AACE,WAAA,MAAA,CACS,IADT,EAES,YAFT,EAGS,SAHT,EAIS,OAJT,EAKS,QALT,EAK0B;AAJjB,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,QAAA,GAAA,QAAA;AACL;AAEJ;;;;;;AAIO,EAAA,MAAA,CAAA,WAAA,GAAP,UAAmB,QAAnB,EAAiC;AAC/B,WAAO,IAAI,MAAJ,CAAW,MAAM,CAAC,KAAlB,EAAyB,QAAzB,CAAP;AACD,GAFM;AAIP;;;;;;;AAKO,EAAA,MAAA,CAAA,gBAAA,GAAP,UAAwB,QAAxB,EAA0C,QAA1C,EAAwD;AACtD,WAAO,IAAI,MAAJ,CAAW,MAAM,CAAC,WAAlB,EAA+B,QAA/B,EAAyC,QAAzC,CAAP;AACD,GAFM;AAIP;;;;;;;AAKO,EAAA,MAAA,CAAA,kBAAA,GAAP,UAA0B,QAA1B,EAA4C,QAA5C,EAA0D;AACxD,WAAO,IAAI,MAAJ,CAAW,MAAM,CAAC,aAAlB,EAAiC,QAAjC,EAA2C,QAA3C,CAAP;AACD,GAFM;AAIP;;;;;;;;AAMO,EAAA,MAAA,CAAA,kBAAA,GAAP,UACE,QADF,EAEE,WAFF,EAGE,WAHF,EAGmB;AAEjB,WAAO,IAAI,MAAJ,CAAW,MAAM,CAAC,aAAlB,EAAiC,WAAjC,EAA8C,QAA9C,EAAwD,WAAxD,CAAP;AACD,GANM;AAQP;;;;;;;AAKO,EAAA,MAAA,CAAA,gBAAA,GAAP,UAAwB,QAAxB,EAA0C,QAA1C,EAAwD;AACtD,WAAO,IAAI,MAAJ,CAAW,MAAM,CAAC,WAAlB,EAA+B,QAA/B,EAAyC,QAAzC,CAAP;AACD,GAFM,CAtDT,CA0DE;;AACA;;;AACO,EAAA,MAAA,CAAA,WAAA,GAAc,aAAd;AAEP;;AACO,EAAA,MAAA,CAAA,aAAA,GAAgB,eAAhB;AAEP;;AACO,EAAA,MAAA,CAAA,aAAA,GAAgB,eAAhB;AAEP;;AACO,EAAA,MAAA,CAAA,WAAA,GAAc,aAAd;AAEP;;AACO,EAAA,MAAA,CAAA,KAAA,GAAQ,OAAR;AACT,SAAA,MAAA;AAAC,CAzED,EAAA;;AAAa,OAAA,CAAA,MAAA,GAAA,MAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n"]},"metadata":{},"sourceType":"script"}