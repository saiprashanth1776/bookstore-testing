{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"../core/util/util\");\n\nvar parser_1 = require(\"../core/util/libs/parser\");\n\nvar Path_1 = require(\"../core/util/Path\");\n\nvar Reference_1 = require(\"./Reference\");\n\nvar Repo_1 = require(\"../core/Repo\");\n\nvar RepoManager_1 = require(\"../core/RepoManager\");\n\nvar util_2 = require(\"@firebase/util\");\n\nvar validation_1 = require(\"../core/util/validation\");\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  function Database(repo_) {\n    this.repo_ = repo_;\n\n    if (!(repo_ instanceof Repo_1.Repo)) {\n      util_1.fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n    /** @type {Reference} */\n\n\n    this.root_ = new Reference_1.Reference(repo_, Path_1.Path.Empty);\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function () {\n      return this.repo_.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Database.prototype.ref = function (path) {\n    this.checkDeleted_('ref');\n    util_2.validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference_1.Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  };\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n\n\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    util_2.validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parser_1.parseRepoInfo(url);\n    validation_1.validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      util_1.fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\n   * @param {string} apiName\n   */\n\n\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repo_ === null) {\n      util_1.fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }; // Make individual repo go offline.\n\n\n  Database.prototype.goOffline = function () {\n    util_2.validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n\n  Database.prototype.goOnline = function () {\n    util_2.validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n  return Database;\n}();\n\nexports.Database = Database;\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  /** @param {!Database} database */\n  function DatabaseInternals(database) {\n    this.database = database;\n  }\n  /** @return {Promise<void>} */\n\n\n  DatabaseInternals.prototype.delete = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        this.database.checkDeleted_('delete');\n        RepoManager_1.RepoManager.getInstance().deleteRepo(this.database.repo_);\n        this.database.repo_ = null;\n        this.database.root_ = null;\n        this.database.INTERNAL = null;\n        this.database = null;\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return DatabaseInternals;\n}();\n\nexports.DatabaseInternals = DatabaseInternals;","map":{"version":3,"sources":["../src/api/Database.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   **/\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== ((this.repo_ as any).repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          ((this.repo_ as any).repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    (this.database as any).checkDeleted_('delete');\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n\n    (this.database as any).repo_ = null;\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}