{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\n\n\nvar CountedSet =\n/** @class */\nfunction () {\n  function CountedSet() {\n    this.set = {};\n  }\n  /**\n   * @param {!K} item\n   * @param {V} val\n   */\n\n\n  CountedSet.prototype.add = function (item, val) {\n    this.set[item] = val !== null ? val : true;\n  };\n  /**\n   * @param {!K} key\n   * @return {boolean}\n   */\n\n\n  CountedSet.prototype.contains = function (key) {\n    return util_1.contains(this.set, key);\n  };\n  /**\n   * @param {!K} item\n   * @return {V}\n   */\n\n\n  CountedSet.prototype.get = function (item) {\n    return this.contains(item) ? this.set[item] : undefined;\n  };\n  /**\n   * @param {!K} item\n   */\n\n\n  CountedSet.prototype.remove = function (item) {\n    delete this.set[item];\n  };\n  /**\n   * Deletes everything in the set\n   */\n\n\n  CountedSet.prototype.clear = function () {\n    this.set = {};\n  };\n  /**\n   * True if there's nothing in the set\n   * @return {boolean}\n   */\n\n\n  CountedSet.prototype.isEmpty = function () {\n    return util_1.isEmpty(this.set);\n  };\n  /**\n   * @return {number} The number of items in the set\n   */\n\n\n  CountedSet.prototype.count = function () {\n    return util_1.getCount(this.set);\n  };\n  /**\n   * Run a function on each k,v pair in the set\n   * @param {function(K, V)} fn\n   */\n\n\n  CountedSet.prototype.each = function (fn) {\n    util_1.forEach(this.set, function (k, v) {\n      return fn(k, v);\n    });\n  };\n  /**\n   * Mostly for debugging\n   * @return {Array.<K>} The keys present in this CountedSet\n   */\n\n\n  CountedSet.prototype.keys = function () {\n    var keys = [];\n    util_1.forEach(this.set, function (k) {\n      keys.push(k);\n    });\n    return keys;\n  };\n\n  return CountedSet;\n}();\n\nexports.CountedSet = CountedSet;","map":{"version":3,"sources":["../src/core/util/CountedSet.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAEA;;;;;;;AAKA,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA;AACE,SAAA,GAAA,GAA0B,EAA1B;AA0ED;AAxEC;;;;;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAAa,GAAb,EAAmB;AACjB,SAAK,GAAL,CAAS,IAAT,IAAwB,GAAG,KAAK,IAAR,GAAe,GAAf,GAAsB,IAA9C;AACD,GAFD;AAIA;;;;;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,GAAT,EAAe;AACb,WAAO,MAAA,CAAA,QAAA,CAAS,KAAK,GAAd,EAAmB,GAAnB,CAAP;AACD,GAFD;AAIA;;;;;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAAW;AACT,WAAO,KAAK,QAAL,CAAc,IAAd,IAAsB,KAAK,GAAL,CAAS,IAAT,CAAtB,GAA8C,SAArD;AACD,GAFD;AAIA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAc;AACZ,WAAO,KAAK,GAAL,CAAS,IAAT,CAAP;AACD,GAFD;AAIA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,SAAK,GAAL,GAAW,EAAX;AACD,GAFD;AAIA;;;;;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,WAAO,MAAA,CAAA,OAAA,CAAQ,KAAK,GAAb,CAAP;AACD,GAFD;AAIA;;;;;AAGA,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,WAAO,MAAA,CAAA,QAAA,CAAS,KAAK,GAAd,CAAP;AACD,GAFD;AAIA;;;;;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,EAAL,EAA6B;AAC3B,IAAA,MAAA,CAAA,OAAA,CAAQ,KAAK,GAAb,EAAkB,UAAC,CAAD,EAAO,CAAP,EAAW;AAAK,aAAA,EAAE,CAAC,CAAD,EAAF,CAAE,CAAF;AAAQ,KAA1C;AACD,GAFD;AAIA;;;;;;AAIA,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,QAAM,IAAI,GAAQ,EAAlB;AACA,IAAA,MAAA,CAAA,OAAA,CAAQ,KAAK,GAAb,EAAkB,UAAC,CAAD,EAAK;AACrB,MAAA,IAAI,CAAC,IAAL,CAAU,CAAV;AACD,KAFD;AAGA,WAAO,IAAP;AACD,GAND;;AAOF,SAAA,UAAA;AAAC,CA3ED,EAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isEmpty, getCount, forEach, contains } from '@firebase/util';\n\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nexport class CountedSet<K, V> {\n  set: { [k: string]: V } = {};\n\n  /**\n   * @param {!K} item\n   * @param {V} val\n   */\n  add(item: K, val: V) {\n    this.set[item as any] = val !== null ? val : (true as any);\n  }\n\n  /**\n   * @param {!K} key\n   * @return {boolean}\n   */\n  contains(key: K) {\n    return contains(this.set, key);\n  }\n\n  /**\n   * @param {!K} item\n   * @return {V}\n   */\n  get(item: K): V | void {\n    return this.contains(item) ? this.set[item as any] : undefined;\n  }\n\n  /**\n   * @param {!K} item\n   */\n  remove(item: K) {\n    delete this.set[item as any];\n  }\n\n  /**\n   * Deletes everything in the set\n   */\n  clear() {\n    this.set = {};\n  }\n\n  /**\n   * True if there's nothing in the set\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return isEmpty(this.set);\n  }\n\n  /**\n   * @return {number} The number of items in the set\n   */\n  count(): number {\n    return getCount(this.set);\n  }\n\n  /**\n   * Run a function on each k,v pair in the set\n   * @param {function(K, V)} fn\n   */\n  each(fn: (k: K, v: V) => void) {\n    forEach(this.set, (k: K, v: V) => fn(k, v));\n  }\n\n  /**\n   * Mostly for debugging\n   * @return {Array.<K>} The keys present in this CountedSet\n   */\n  keys(): K[] {\n    const keys: K[] = [];\n    forEach(this.set, (k: K) => {\n      keys.push(k);\n    });\n    return keys;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}