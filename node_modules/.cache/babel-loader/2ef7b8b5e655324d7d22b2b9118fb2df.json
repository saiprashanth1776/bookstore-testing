{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent } from './src/implementation/taskenums';\nimport { TaskState } from './src/implementation/taskenums';\nimport { XhrIoPool } from './src/implementation/xhriopool';\nimport { Reference } from './src/reference';\nimport { Service } from './src/service';\n/**\n * Type constant for Firebase Storage.\n */\n\nvar STORAGE_TYPE = 'storage';\n\nfunction factory(app, unused, opt_url) {\n  return new Service(app, new XhrIoPool(), opt_url);\n}\n\nexport function registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: Service,\n    Reference: Reference\n  };\n  instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, // Allow multiple storage instances per app.\n  true);\n}\nregisterStorage(firebase);","map":{"version":3,"sources":["../index.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,OAAO,QAAP,MAAqB,eAArB;AAGA,SAAS,YAAT,QAA6B,6BAA7B;AACA,SAAS,SAAT,QAA0B,gCAA1B;AACA,SAAS,SAAT,QAA0B,gCAA1B;AACA,SAAS,SAAT,QAA0B,gCAA1B;AACA,SAAS,SAAT,QAA0B,iBAA1B;AACA,SAAS,OAAT,QAAwB,eAAxB;AAGA;;;;AAGA,IAAM,YAAY,GAAG,SAArB;;AAEA,SAAA,OAAA,CACE,GADF,EAEE,MAFF,EAGE,OAHF,EAGkB;AAEhB,SAAO,IAAI,OAAJ,CAAY,GAAZ,EAAiB,IAAI,SAAJ,EAAjB,EAAkC,OAAlC,CAAP;AACD;;AAED,OAAM,SAAA,eAAA,CAA0B,QAA1B,EAAkC;AACtC,MAAI,gBAAgB,GAAG;AACrB;AACA,IAAA,SAAS,EAAE,SAFU;AAGrB,IAAA,SAAS,EAAE,SAHU;AAIrB,IAAA,YAAY,EAAE,YAJO;AAKrB,IAAA,OAAO,EAAE,OALY;AAMrB,IAAA,SAAS,EAAE;AANU,GAAvB;AAQA,EAAA,QAAQ,CAAC,QAAT,CAAkB,eAAlB,CACE,YADF,EAEE,OAFF,EAGE,gBAHF,EAIE,SAJF,EAKE;AACA,MANF;AAQD;AAED,eAAe,CAAC,QAAD,CAAf","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseServiceFactory } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent } from './src/implementation/taskenums';\nimport { TaskState } from './src/implementation/taskenums';\nimport { XhrIoPool } from './src/implementation/xhriopool';\nimport { Reference } from './src/reference';\nimport { Service } from './src/service';\nimport * as types from '@firebase/storage-types';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  app: FirebaseApp,\n  unused: any,\n  opt_url?: string\n): types.FirebaseStorage {\n  return new Service(app, new XhrIoPool(), opt_url) as any;\n}\n\nexport function registerStorage(instance) {\n  let namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: Service,\n    Reference: Reference\n  };\n  instance.INTERNAL.registerService(\n    STORAGE_TYPE,\n    factory as FirebaseServiceFactory,\n    namespaceExports,\n    undefined,\n    // Allow multiple storage instances per app.\n    true\n  );\n}\n\nregisterStorage(firebase);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}