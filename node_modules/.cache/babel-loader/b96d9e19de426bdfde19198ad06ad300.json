{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\n\n\nvar DOMStorageWrapper =\n/** @class */\nfunction () {\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n\n\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), util_1.stringify(value));\n    }\n  };\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n\n\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return util_1.jsonEval(storedVal);\n    }\n  };\n  /**\n   * @param {string} key\n   */\n\n\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n\n\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n\n  return DOMStorageWrapper;\n}();\n\nexports.DOMStorageWrapper = DOMStorageWrapper;","map":{"version":3,"sources":["../src/core/storage/DOMStorageWrapper.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAEA;;;;;;;;;;;;AAUA,IAAA,iBAAA;AAAA;AAAA,YAAA;AAIE;;;AAGA,WAAA,iBAAA,CAAoB,WAApB,EAAwC;AAApB,SAAA,WAAA,GAAA,WAAA,CAAoB,CANxC;;AACQ,SAAA,OAAA,GAAU,WAAV;AAKoC;AAE5C;;;;;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,GAAJ,EAAiB,KAAjB,EAAkC;AAChC,QAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAK,WAAL,CAAiB,UAAjB,CAA4B,KAAK,aAAL,CAAmB,GAAnB,CAA5B;AACD,KAFD,MAEO;AACL,WAAK,WAAL,CAAiB,OAAjB,CAAyB,KAAK,aAAL,CAAmB,GAAnB,CAAzB,EAAkD,MAAA,CAAA,SAAA,CAAU,KAAV,CAAlD;AACD;AACF,GAND;AAQA;;;;;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,GAAJ,EAAe;AACb,QAAM,SAAS,GAAG,KAAK,WAAL,CAAiB,OAAjB,CAAyB,KAAK,aAAL,CAAmB,GAAnB,CAAzB,CAAlB;;AACA,QAAI,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAA,CAAA,QAAA,CAAS,SAAT,CAAP;AACD;AACF,GAPD;AASA;;;;;AAGA,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,GAAP,EAAkB;AAChB,SAAK,WAAL,CAAiB,UAAjB,CAA4B,KAAK,aAAL,CAAmB,GAAnB,CAA5B;AACD,GAFD;AAMA;;;;;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,IAAd,EAA0B;AACxB,WAAO,KAAK,OAAL,GAAe,IAAtB;AACD,GAFD;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,WAAO,KAAK,WAAL,CAAiB,QAAjB,EAAP;AACD,GAFD;;AAGF,SAAA,iBAAA;AAAC,CAtDD,EAAA;;AAAa,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: any | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): any {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}