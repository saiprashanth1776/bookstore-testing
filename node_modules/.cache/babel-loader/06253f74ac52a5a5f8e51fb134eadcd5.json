{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\n\n\nvar StatsListener =\n/** @class */\nfunction () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n    var delta = util_1.clone(newStats);\n\n    if (this.last_) {\n      util_1.forEach(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  };\n\n  return StatsListener;\n}();\n\nexports.StatsListener = StatsListener;","map":{"version":3,"sources":["../src/core/stats/StatsListener.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAGA;;;;;;;;AAMA,IAAA,aAAA;AAAA;AAAA,YAAA;AAGE,WAAA,aAAA,CAAoB,WAApB,EAAgD;AAA5B,SAAA,WAAA,GAAA,WAAA;AAFZ,SAAA,KAAA,GAAwC,IAAxC;AAE4C;;AAEpD,EAAA,aAAA,CAAA,SAAA,CAAA,GAAA,GAAA,YAAA;AACE,QAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,GAAjB,EAAjB;AAEA,QAAM,KAAK,GAAoB,MAAA,CAAA,KAAA,CAAM,QAAN,CAA/B;;AACA,QAAI,KAAK,KAAT,EAAgB;AACd,MAAA,MAAA,CAAA,OAAA,CAAQ,KAAK,KAAb,EAAoB,UAAC,IAAD,EAAe,KAAf,EAA4B;AAC9C,QAAA,KAAK,CAAC,IAAD,CAAL,GAAc,KAAK,CAAC,IAAD,CAAL,GAAc,KAA5B;AACD,OAFD;AAGD;;AACD,SAAK,KAAL,GAAa,QAAb;AAEA,WAAO,KAAP;AACD,GAZD;;AAaF,SAAA,aAAA;AAAC,CAlBD,EAAA;;AAAa,OAAA,CAAA,aAAA,GAAA,aAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { clone, forEach } from '@firebase/util';\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta: typeof newStats = clone(newStats);\n    if (this.last_) {\n      forEach(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}