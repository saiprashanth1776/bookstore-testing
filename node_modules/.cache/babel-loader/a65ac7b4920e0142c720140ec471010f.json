{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Node_1 = require(\"../snap/Node\");\n\nvar Change_1 = require(\"./Change\");\n\nvar util_1 = require(\"@firebase/util\");\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\n\n\nvar EventGenerator =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param {!Query} query_\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\n     * @private\n     * @type {!Index}\n     */\n\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n\n\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change_1.Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change_1.Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change_1.Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change_1.Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n\n\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n\n\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n      /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n\n\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw util_1.assertionError('Should only compare child_ events.');\n    }\n\n    var aWrapped = new Node_1.NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new Node_1.NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n\n  return EventGenerator;\n}();\n\nexports.EventGenerator = EventGenerator;","map":{"version":3,"sources":["../src/core/view/EventGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}