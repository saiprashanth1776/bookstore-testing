{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * An iterator over an LLRBNode.\n */\n\nvar SortedMapIterator =\n/** @class */\nfunction () {\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    /** @private\n     * @type {Array.<!LLRBNode>}\n     */\n\n    this.nodeStack_ = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) cmp *= -1;\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) return null;\n    var node = this.nodeStack_.pop();\n    var result;\n    if (this.resultGenerator_) result = this.resultGenerator_(node.key, node.value);else result = {\n      key: node.key,\n      value: node.value\n    };\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  };\n\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) return null;\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n\n  return SortedMapIterator;\n}();\n\nexports.SortedMapIterator = SortedMapIterator;\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\n\nvar LLRBNode =\n/** @class */\nfunction () {\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n\n\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n\n\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n\n\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n\n\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n\n\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n\n\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n\n\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n\n\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n\n\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var cmp, n;\n    n = this;\n    cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n\n\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    var n = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n\n\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) n = n.rotateRight_();\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n\n\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n\n\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n    if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n    if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n    if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n    return n;\n  };\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n\n\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n\n\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n\n\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n\n\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n\n\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n\n\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n\n\n  LLRBNode.prototype.check_ = function () {\n    var blackDepth;\n\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n\nexports.LLRBNode = LLRBNode;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\n\nvar LLRBEmptyNode =\n/** @class */\nfunction () {\n  function LLRBEmptyNode() {}\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n\n\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n\n\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n\n\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n\n\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n\n\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n\n\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n\n\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n  /**\n   * @return {null}\n   */\n\n\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n  /**\n   * @return {null}\n   */\n\n\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n\n\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n\n\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n\n  return LLRBEmptyNode;\n}();\n\nexports.LLRBEmptyNode = LLRBEmptyNode;\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\n\nvar SortedMap =\n/** @class */\nfunction () {\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n\n\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n\n\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n\n\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n\n\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) node = node.right;\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n\n\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n\n\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n\n\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n\n\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n\n\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n\n\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n\n\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n\n\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n\nexports.SortedMap = SortedMap;","map":{"version":3,"sources":["../src/core/util/SortedMap.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: (LLRBNode<K, V> | LLRBEmptyNode<K, V>)[] = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) cmp *= -1;\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_)\n      result = this.resultGenerator_(node.key, node.value);\n    else result = { key: node.key, value: node.value } as any;\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) return null;\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as any;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let cmp, n;\n    n = this;\n    cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) n = n.rotateRight_();\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n = this as any;\n    if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();\n    if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();\n    if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    let blackDepth;\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) node = node.right;\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => any): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}