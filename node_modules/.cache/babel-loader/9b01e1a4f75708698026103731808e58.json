{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\nimport Errors from './errors';\n\nvar DBInterface =\n/** @class */\nfunction () {\n  /**\n   * @param {string} dbName\n   * @param {number} dbVersion\n   */\n  function DBInterface(dbName, dbVersion) {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n    this.DB_NAME_ = dbName;\n    this.dbVersion_ = dbVersion;\n    this.openDbPromise_ = null;\n    this.TRANSACTION_READ_WRITE = 'readwrite';\n  }\n  /**\n   * Get the indexedDB as a promsie.\n   * @protected\n   * @return {!Promise<!IDBDatabase>} The IndexedDB database\n   */\n\n\n  DBInterface.prototype.openDatabase = function () {\n    var _this = this;\n\n    if (this.openDbPromise_) {\n      return this.openDbPromise_;\n    }\n\n    this.openDbPromise_ = new Promise(function (resolve, reject) {\n      var request = indexedDB.open(_this.DB_NAME_, _this.dbVersion_);\n\n      request.onerror = function (event) {\n        reject(event.target.error);\n      };\n\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n\n      request.onupgradeneeded = function (event) {\n        try {\n          var db = event.target.result;\n\n          _this.onDBUpgrade(db, event);\n        } catch (err) {\n          // close the database as it can't be used.\n          db.close();\n          reject(err);\n        }\n      };\n    });\n    return this.openDbPromise_;\n  };\n  /**\n   * Close the currently open database.\n   * @return {!Promise} Returns the result of the promise chain.\n   */\n\n\n  DBInterface.prototype.closeDatabase = function () {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      if (_this.openDbPromise_) {\n        return _this.openDbPromise_.then(function (db) {\n          db.close();\n          _this.openDbPromise_ = null;\n        });\n      }\n    });\n  };\n  /**\n   * @protected\n   * @param {!IDBDatabase} db\n   */\n\n\n  DBInterface.prototype.onDBUpgrade = function (db, event) {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  };\n\n  return DBInterface;\n}();\n\nexport default DBInterface;","map":{"version":3,"sources":["../src/models/db-interface.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA;;AAEA,SAAS,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAP,MAAmB,UAAnB;;AAEA,IAAA,WAAA;AAAA;AAAA,YAAA;AAOE;;;;AAIA,WAAA,WAAA,CAAY,MAAZ,EAAoB,SAApB,EAA6B;AAC3B,SAAK,aAAL,GAAqB,IAAI,YAAJ,CAAiB,WAAjB,EAA8B,WAA9B,EAA2C,MAAM,CAAC,GAAlD,CAArB;AACA,SAAK,QAAL,GAAgB,MAAhB;AACA,SAAK,UAAL,GAAkB,SAAlB;AACA,SAAK,cAAL,GAAsB,IAAtB;AACA,SAAK,sBAAL,GAA8B,WAA9B;AACD;AAED;;;;;;;AAKA,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,KAAK,cAAT,EAAyB;AACvB,aAAO,KAAK,cAAZ;AACD;;AAED,SAAK,cAAL,GAAsB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAChD,UAAM,OAAO,GAAG,SAAS,CAAC,IAAV,CAAe,KAAI,CAAC,QAApB,EAA8B,KAAI,CAAC,UAAnC,CAAhB;;AACA,MAAA,OAAO,CAAC,OAAR,GAAkB,UAAA,KAAA,EAAK;AACrB,QAAA,MAAM,CAAc,KAAK,CAAC,MAAN,CAAc,KAA5B,CAAN;AACD,OAFD;;AAGA,MAAA,OAAO,CAAC,SAAR,GAAoB,UAAA,KAAA,EAAK;AACvB,QAAA,OAAO,CAAc,KAAK,CAAC,MAAN,CAAc,MAA5B,CAAP;AACD,OAFD;;AAGA,MAAA,OAAO,CAAC,eAAR,GAA0B,UAAA,KAAA,EAAK;AAC7B,YAAI;AACF,cAAI,EAAE,GAAgB,KAAK,CAAC,MAAN,CAAc,MAApC;;AACA,UAAA,KAAI,CAAC,WAAL,CAAiB,EAAjB,EAAqB,KAArB;AACD,SAHD,CAGE,OAAO,GAAP,EAAY;AACZ;AACA,UAAA,EAAE,CAAC,KAAH;AACA,UAAA,MAAM,CAAC,GAAD,CAAN;AACD;AACF,OATD;AAUD,KAlBqB,CAAtB;AAoBA,WAAO,KAAK,cAAZ;AACD,GA1BD;AA4BA;;;;;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAAA;AAC5B,UAAI,KAAI,CAAC,cAAT,EAAyB;AACvB,eAAO,KAAI,CAAC,cAAL,CAAoB,IAApB,CAAyB,UAAA,EAAA,EAAE;AAChC,UAAA,EAAE,CAAC,KAAH;AACA,UAAA,KAAI,CAAC,cAAL,GAAsB,IAAtB;AACD,SAHM,CAAP;AAID;AACF,KAPM,CAAP;AAQD,GATD;AAWA;;;;;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,EAAZ,EAA6B,KAA7B,EAAyD;AACvD,UAAM,KAAK,aAAL,CAAmB,MAAnB,CAA0B,MAAM,CAAC,KAAP,CAAa,mBAAvC,CAAN;AACD,GAFD;;AAGF,SAAA,WAAA;AAAC,CA1ED,EAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\n\nimport Errors from './errors';\n\nexport default class DBInterface {\n  private DB_NAME_: string;\n  private dbVersion_: number;\n  private openDbPromise_: Promise<IDBDatabase>;\n  protected errorFactory_: ErrorFactory<string>;\n  protected TRANSACTION_READ_WRITE: IDBTransactionMode;\n\n  /**\n   * @param {string} dbName\n   * @param {number} dbVersion\n   */\n  constructor(dbName, dbVersion) {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n    this.DB_NAME_ = dbName;\n    this.dbVersion_ = dbVersion;\n    this.openDbPromise_ = null;\n    this.TRANSACTION_READ_WRITE = 'readwrite';\n  }\n\n  /**\n   * Get the indexedDB as a promsie.\n   * @protected\n   * @return {!Promise<!IDBDatabase>} The IndexedDB database\n   */\n  openDatabase() {\n    if (this.openDbPromise_) {\n      return this.openDbPromise_;\n    }\n\n    this.openDbPromise_ = new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME_, this.dbVersion_);\n      request.onerror = event => {\n        reject((<IDBRequest>event.target).error);\n      };\n      request.onsuccess = event => {\n        resolve((<IDBRequest>event.target).result);\n      };\n      request.onupgradeneeded = event => {\n        try {\n          var db = (<IDBRequest>event.target).result;\n          this.onDBUpgrade(db, event);\n        } catch (err) {\n          // close the database as it can't be used.\n          db.close();\n          reject(err);\n        }\n      };\n    });\n\n    return this.openDbPromise_;\n  }\n\n  /**\n   * Close the currently open database.\n   * @return {!Promise} Returns the result of the promise chain.\n   */\n  closeDatabase() {\n    return Promise.resolve().then(() => {\n      if (this.openDbPromise_) {\n        return this.openDbPromise_.then(db => {\n          db.close();\n          this.openDbPromise_ = null;\n        });\n      }\n    });\n  }\n\n  /**\n   * @protected\n   * @param {!IDBDatabase} db\n   */\n  onDBUpgrade(db: IDBDatabase, event: IDBVersionChangeEvent) {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}