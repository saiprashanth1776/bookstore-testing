{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar Path_1 = require(\"../util/Path\");\n\nvar Operation_1 = require(\"./Operation\");\n\nvar AckUserWrite =\n/** @class */\nfunction () {\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  function AckUserWrite(\n  /**@inheritDoc */\n  path,\n  /**@inheritDoc */\n  affectedTree,\n  /**@inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = Operation_1.OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = Operation_1.OperationSource.User;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!this.path.isEmpty()) {\n      util_1.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      util_1.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path_1.Path(childName));\n      return new AckUserWrite(Path_1.Path.Empty, childTree, this.revert);\n    }\n  };\n\n  return AckUserWrite;\n}();\n\nexports.AckUserWrite = AckUserWrite;","map":{"version":3,"sources":["../src/core/operation/AckUserWrite.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAGA,IAAA,YAAA;AAAA;AAAA,YAAA;AAOE;;;;;;AAMA,WAAA,YAAA;AACE;AAAyB,EAAA,IAD3B;AAEE;AAAyB,EAAA,YAF3B;AAGE;AAAyB,EAAA,MAH3B,EAG0C;AAFf,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,MAAA,GAAA,MAAA;AAf3B;;AACA,SAAA,IAAA,GAAO,WAAA,CAAA,aAAA,CAAc,cAArB;AAEA;;AACA,SAAA,MAAA,GAAS,WAAA,CAAA,eAAA,CAAgB,IAAzB;AAYI;AAEJ;;;;;AAGA,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,SAAlB,EAAmC;AACjC,QAAI,CAAC,KAAK,IAAL,CAAU,OAAV,EAAL,EAA0B;AACxB,MAAA,MAAA,CAAA,MAAA,CACE,KAAK,IAAL,CAAU,QAAV,OAAyB,SAD3B,EAEE,+CAFF;AAIA,aAAO,IAAI,YAAJ,CACL,KAAK,IAAL,CAAU,QAAV,EADK,EAEL,KAAK,YAFA,EAGL,KAAK,MAHA,CAAP;AAKD,KAVD,MAUO,IAAI,KAAK,YAAL,CAAkB,KAAlB,IAA2B,IAA/B,EAAqC;AAC1C,MAAA,MAAA,CAAA,MAAA,CACE,KAAK,YAAL,CAAkB,QAAlB,CAA2B,OAA3B,EADF,EAEE,0DAFF,EAD0C,CAK1C;;AACA,aAAO,IAAP;AACD,KAPM,MAOA;AACL,UAAM,SAAS,GAAG,KAAK,YAAL,CAAkB,OAAlB,CAA0B,IAAI,MAAA,CAAA,IAAJ,CAAS,SAAT,CAA1B,CAAlB;AACA,aAAO,IAAI,YAAJ,CAAiB,MAAA,CAAA,IAAA,CAAK,KAAtB,EAA6B,SAA7B,EAAwC,KAAK,MAA7C,CAAP;AACD;AACF,GAtBD;;AAuBF,SAAA,YAAA;AAAC,CA7CD,EAAA;;AAAa,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /**@inheritDoc */ public path: Path,\n    /**@inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /**@inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}