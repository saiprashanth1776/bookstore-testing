{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar Path_1 = require(\"./Path\");\n\nvar SparseSnapshotTree_1 = require(\"../SparseSnapshotTree\");\n\nvar LeafNode_1 = require(\"../snap/LeafNode\");\n\nvar nodeFromJSON_1 = require(\"../snap/nodeFromJSON\");\n\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\n\n\nexports.generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\n\n\nexports.resolveDeferredValue = function (value, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  } else {\n    util_1.assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\n\n\nexports.resolveDeferredValueTree = function (tree, serverValues) {\n  var resolvedTree = new SparseSnapshotTree_1.SparseSnapshotTree();\n  tree.forEachTree(new Path_1.Path(''), function (path, node) {\n    resolvedTree.remember(path, exports.resolveDeferredValueSnapshot(node, serverValues));\n  });\n  return resolvedTree;\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\n\n\nexports.resolveDeferredValueSnapshot = function (node, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = exports.resolveDeferredValue(rawPri, serverValues);\n  var newNode;\n\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = exports.resolveDeferredValue(leafNode.getValue(), serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode_1.LeafNode(value, nodeFromJSON_1.nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode_1.LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = exports.resolveDeferredValueSnapshot(childNode, serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};","map":{"version":3,"sources":["../src/core/util/ServerValues.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;AAgBA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;AAIA;;;;;;;AAKa,OAAA,CAAA,kBAAA,GAAqB,UAChC,MADgC,EAGxB;AAER,EAAA,MAAM,GAAG,MAAM,IAAI,EAAnB;AACA,EAAA,MAAM,CAAC,WAAD,CAAN,GAAsB,MAAM,CAAC,WAAD,CAAN,IAAuB,IAAI,IAAJ,GAAW,OAAX,EAA7C;AACA,SAAO,MAAP;AACD,CARY;AAUb;;;;;;;;;AAOa,OAAA,CAAA,oBAAA,GAAuB,UAClC,KADkC,EAElC,YAFkC,EAEA;AAElC,MAAI,CAAC,KAAD,IAAU,OAAO,KAAP,KAAiB,QAA/B,EAAyC;AACvC,WAAO,KAAP;AACD,GAFD,MAEO;AACL,IAAA,MAAA,CAAA,MAAA,CAAO,SAAS,KAAhB,EAAuB,2CAAvB;AACA,WAAO,YAAY,CAAC,KAAK,CAAC,KAAD,CAAN,CAAnB;AACD;AACF,CAVY;AAYb;;;;;;;;;AAOa,OAAA,CAAA,wBAAA,GAA2B,UACtC,IADsC,EAEtC,YAFsC,EAElB;AAEpB,MAAM,YAAY,GAAG,IAAI,oBAAA,CAAA,kBAAJ,EAArB;AACA,EAAA,IAAI,CAAC,WAAL,CAAiB,IAAI,MAAA,CAAA,IAAJ,CAAS,EAAT,CAAjB,EAA+B,UAAS,IAAT,EAAe,IAAf,EAAmB;AAChD,IAAA,YAAY,CAAC,QAAb,CACE,IADF,EAEE,OAAA,CAAA,4BAAA,CAA6B,IAA7B,EAAmC,YAAnC,CAFF;AAID,GALD;AAMA,SAAO,YAAP;AACD,CAZY;AAcb;;;;;;;;;;AAQa,OAAA,CAAA,4BAAA,GAA+B,UAC1C,IAD0C,EAE1C,YAF0C,EAEtB;AAEpB,MAAM,MAAM,GAAG,IAAI,CAAC,WAAL,GAAmB,GAAnB,EAAf;AAMA,MAAM,QAAQ,GAAG,OAAA,CAAA,oBAAA,CAAqB,MAArB,EAA6B,YAA7B,CAAjB;AACA,MAAI,OAAJ;;AAEA,MAAI,IAAI,CAAC,UAAL,EAAJ,EAAuB;AACrB,QAAM,QAAQ,GAAG,IAAjB;AACA,QAAM,KAAK,GAAG,OAAA,CAAA,oBAAA,CAAqB,QAAQ,CAAC,QAAT,EAArB,EAA0C,YAA1C,CAAd;;AACA,QACE,KAAK,KAAK,QAAQ,CAAC,QAAT,EAAV,IACA,QAAQ,KAAK,QAAQ,CAAC,WAAT,GAAuB,GAAvB,EAFf,EAGE;AACA,aAAO,IAAI,UAAA,CAAA,QAAJ,CAAa,KAAb,EAAoB,cAAA,CAAA,YAAA,CAAa,QAAb,CAApB,CAAP;AACD,KALD,MAKO;AACL,aAAO,IAAP;AACD;AACF,GAXD,MAWO;AACL,QAAM,YAAY,GAAG,IAArB;AACA,IAAA,OAAO,GAAG,YAAV;;AACA,QAAI,QAAQ,KAAK,YAAY,CAAC,WAAb,GAA2B,GAA3B,EAAjB,EAAmD;AACjD,MAAA,OAAO,GAAG,OAAO,CAAC,cAAR,CAAuB,IAAI,UAAA,CAAA,QAAJ,CAAa,QAAb,CAAvB,CAAV;AACD;;AACD,IAAA,YAAY,CAAC,YAAb,CAA0B,eAAA,CAAA,cAA1B,EAA0C,UAAS,SAAT,EAAoB,SAApB,EAA6B;AACrE,UAAM,YAAY,GAAG,OAAA,CAAA,4BAAA,CACnB,SADmB,EAEnB,YAFmB,CAArB;;AAIA,UAAI,YAAY,KAAK,SAArB,EAAgC;AAC9B,QAAA,OAAO,GAAG,OAAO,CAAC,oBAAR,CAA6B,SAA7B,EAAwC,YAAxC,CAAV;AACD;AACF,KARD;AASA,WAAO,OAAP;AACD;AACF,CAzCY","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function(\n  values: {\n    [k: string]: any;\n  } | null\n): { [k: string]: any } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredValue = function(\n  value: { [k: string]: any } | string | number | boolean,\n  serverValues: { [k: string]: any }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  } else {\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    return serverValues[value['.sv']];\n  }\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function(\n  tree: SparseSnapshotTree,\n  serverValues: Object\n): SparseSnapshotTree {\n  const resolvedTree = new SparseSnapshotTree();\n  tree.forEachTree(new Path(''), function(path, node) {\n    resolvedTree.remember(\n      path,\n      resolveDeferredValueSnapshot(node, serverValues)\n    );\n  });\n  return resolvedTree;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function(\n  node: Node,\n  serverValues: Object\n): Node {\n  const rawPri = node.getPriority().val() as\n    | object\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredValue(rawPri, serverValues);\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredValue(leafNode.getValue(), serverValues);\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {\n      const newChildNode = resolveDeferredValueSnapshot(\n        childNode,\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}