{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport * as tslib_1 from \"tslib\";\nimport DBInterface from './db-interface';\nimport Errors from './errors';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\nimport { cleanV1 } from './clean-v1-undefined';\nvar FCM_TOKEN_OBJ_STORE = 'fcm_token_object_Store';\nvar DB_NAME = 'fcm_token_details_db';\nvar DB_VERSION = 2;\n/** @record */\n\nfunction ValidateInput() {}\n/** @type {string|undefined} */\n\n\nValidateInput.prototype.fcmToken;\n/** @type {string|undefined} */\n\nValidateInput.prototype.swScope;\n/** @type {string|undefined} */\n\nValidateInput.prototype.vapidKey;\n/** @type {PushSubscription|undefined} */\n\nValidateInput.prototype.subscription;\n/** @type {string|undefined} */\n\nValidateInput.prototype.fcmSenderId;\n/** @type {string|undefined} */\n\nValidateInput.prototype.fcmPushSet;\n\nvar TokenDetailsModel =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(TokenDetailsModel, _super);\n\n  function TokenDetailsModel() {\n    return _super.call(this, DB_NAME, DB_VERSION) || this;\n  }\n\n  TokenDetailsModel.prototype.onDBUpgrade = function (db, evt) {\n    if (evt.oldVersion < 1) {\n      // New IDB instance\n      var objectStore = db.createObjectStore(FCM_TOKEN_OBJ_STORE, {\n        keyPath: 'swScope'\n      }); // Make sure the sender ID can be searched\n\n      objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\n        unique: false\n      });\n      objectStore.createIndex('fcmToken', 'fcmToken', {\n        unique: true\n      });\n    }\n\n    if (evt.oldVersion < 2) {\n      // Prior to version 2, we were using either 'fcm_token_details_db'\n      // or 'undefined' as the database name due to bug in the SDK\n      // So remove the old tokens and databases.\n      cleanV1();\n    }\n  };\n  /**\n   * This method takes an object and will check for known arguments and\n   * validate the input.\n   * @private\n   * @param {!ValidateInput} input\n   * @return {!Promise} Returns promise that resolves if input is valid,\n   * rejects otherwise.\n   */\n\n\n  TokenDetailsModel.prototype.validateInputs_ = function (input) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (input.fcmToken) {\n          if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\n            return [2\n            /*return*/\n            , Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN))];\n          }\n        }\n\n        if (input.swScope) {\n          if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\n            return [2\n            /*return*/\n            , Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE))];\n          }\n        }\n\n        if (input.vapidKey) {\n          if (!(input.vapidKey instanceof Uint8Array) || input.vapidKey.length !== 65) {\n            return [2\n            /*return*/\n            , Promise.reject(this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY))];\n          }\n        }\n\n        if (input.subscription) {\n          if (!(input.subscription instanceof PushSubscription)) {\n            return [2\n            /*return*/\n            , Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION))];\n          }\n        }\n\n        if (input.fcmSenderId) {\n          if (typeof input.fcmSenderId !== 'string' || input.fcmSenderId.length === 0) {\n            return [2\n            /*return*/\n            , Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SENDER_ID))];\n          }\n        }\n\n        if (input.fcmPushSet) {\n          if (typeof input.fcmPushSet !== 'string' || input.fcmPushSet.length === 0) {\n            return [2\n            /*return*/\n            , Promise.reject(this.errorFactory_.create(Errors.codes.BAD_PUSH_SET))];\n          }\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Given a token, this method will look up the details in indexedDB.\n   * @param {string} fcmToken\n   * @return {Promise<Object>} The details associated with that token.\n   */\n\n\n  TokenDetailsModel.prototype.getTokenDetailsFromToken = function (fcmToken) {\n    var _this = this;\n\n    if (!fcmToken) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n    }\n\n    return this.validateInputs_({\n      fcmToken: fcmToken\n    }).then(function () {\n      return _this.openDatabase();\n    }).then(function (db) {\n      return new Promise(function (resolve, reject) {\n        var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n        var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n        var index = objectStore.index('fcmToken');\n        var request = index.get(fcmToken);\n\n        request.onerror = function (event) {\n          reject(event.target.error);\n        };\n\n        request.onsuccess = function (event) {\n          var result = event.target.result ? event.target.result : null;\n          resolve(result);\n        };\n      });\n    });\n  };\n  /**\n   * Given a service worker scope, this method will look up the details in\n   * indexedDB.\n   * @public\n   * @param {string} swScope\n   * @return {Promise<Object>} The details associated with that token.\n   */\n\n\n  TokenDetailsModel.prototype.getTokenDetailsFromSWScope = function (swScope) {\n    var _this = this;\n\n    if (!swScope) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.validateInputs_({\n      swScope: swScope\n    }).then(function () {\n      return _this.openDatabase();\n    }).then(function (db) {\n      return new Promise(function (resolve, reject) {\n        var transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n        var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n        var scopeRequest = objectStore.get(swScope);\n\n        scopeRequest.onerror = function (event) {\n          reject(event.target.error);\n        };\n\n        scopeRequest.onsuccess = function (event) {\n          var result = event.target.result ? event.target.result : null;\n          resolve(result);\n        };\n      });\n    });\n  };\n  /**\n   * Save the details for the fcm token for re-use at a later date.\n   * @param {{swScope: !string, vapidKey: !string,\n   * subscription: !PushSubscription, fcmSenderId: !string, fcmToken: !string,\n   * fcmPushSet: !string}} input A plain js object containing args to save.\n   * @return {Promise<void>}\n   */\n\n\n  TokenDetailsModel.prototype.saveTokenDetails = function (_a) {\n    var _this = this;\n\n    var swScope = _a.swScope,\n        vapidKey = _a.vapidKey,\n        subscription = _a.subscription,\n        fcmSenderId = _a.fcmSenderId,\n        fcmToken = _a.fcmToken,\n        fcmPushSet = _a.fcmPushSet;\n\n    if (!swScope) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    if (!vapidKey) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY));\n    }\n\n    if (!subscription) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION));\n    }\n\n    if (!fcmSenderId) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SENDER_ID));\n    }\n\n    if (!fcmToken) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n    }\n\n    if (!fcmPushSet) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_PUSH_SET));\n    }\n\n    return this.validateInputs_({\n      swScope: swScope,\n      vapidKey: vapidKey,\n      subscription: subscription,\n      fcmSenderId: fcmSenderId,\n      fcmToken: fcmToken,\n      fcmPushSet: fcmPushSet\n    }).then(function () {\n      return _this.openDatabase();\n    }).then(function (db) {\n      /**\n       * @dict\n       */\n      var details = {\n        swScope: swScope,\n        vapidKey: arrayBufferToBase64(vapidKey),\n        endpoint: subscription.endpoint,\n        auth: arrayBufferToBase64(subscription['getKey']('auth')),\n        p256dh: arrayBufferToBase64(subscription['getKey']('p256dh')),\n        fcmSenderId: fcmSenderId,\n        fcmToken: fcmToken,\n        fcmPushSet: fcmPushSet,\n        createTime: Date.now()\n      };\n      return new Promise(function (resolve, reject) {\n        var transaction = db.transaction([FCM_TOKEN_OBJ_STORE], _this.TRANSACTION_READ_WRITE);\n        var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n        var request = objectStore.put(details);\n\n        request.onerror = function (event) {\n          reject(event.target.error);\n        };\n\n        request.onsuccess = function (event) {\n          resolve();\n        };\n      });\n    });\n  };\n  /**\n   * This method deletes details of the current FCM token.\n   * It's returning a promise in case we need to move to an async\n   * method for deleting at a later date.\n   * @return {Promise<Object>} Resolves once the FCM token details have been\n   * deleted and returns the deleted details.\n   */\n\n\n  TokenDetailsModel.prototype.deleteToken = function (token) {\n    var _this = this;\n\n    if (typeof token !== 'string' || token.length === 0) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.INVALID_DELETE_TOKEN));\n    }\n\n    return this.getTokenDetailsFromToken(token).then(function (details) {\n      if (!details) {\n        throw _this.errorFactory_.create(Errors.codes.DELETE_TOKEN_NOT_FOUND);\n      }\n\n      return _this.openDatabase().then(function (db) {\n        return new Promise(function (resolve, reject) {\n          var transaction = db.transaction([FCM_TOKEN_OBJ_STORE], _this.TRANSACTION_READ_WRITE);\n          var objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          var request = objectStore.delete(details['swScope']);\n\n          request.onerror = function (event) {\n            reject(event.target.error);\n          };\n\n          request.onsuccess = function (event) {\n            if (event.target.result === 0) {\n              reject(_this.errorFactory_.create(Errors.codes.FAILED_TO_DELETE_TOKEN));\n              return;\n            }\n\n            resolve(details);\n          };\n        });\n      });\n    });\n  };\n\n  return TokenDetailsModel;\n}(DBInterface);\n\nexport default TokenDetailsModel;","map":{"version":3,"sources":["../src/models/token-details-model.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport DBInterface from './db-interface';\nimport Errors from './errors';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\nimport { cleanV1 } from './clean-v1-undefined';\n\nconst FCM_TOKEN_OBJ_STORE = 'fcm_token_object_Store';\nconst DB_NAME = 'fcm_token_details_db';\nconst DB_VERSION = 2;\n\n/** @record */\nfunction ValidateInput() {}\n/** @type {string|undefined} */\nValidateInput.prototype.fcmToken;\n/** @type {string|undefined} */\nValidateInput.prototype.swScope;\n/** @type {string|undefined} */\nValidateInput.prototype.vapidKey;\n/** @type {PushSubscription|undefined} */\nValidateInput.prototype.subscription;\n/** @type {string|undefined} */\nValidateInput.prototype.fcmSenderId;\n/** @type {string|undefined} */\nValidateInput.prototype.fcmPushSet;\n\nexport default class TokenDetailsModel extends DBInterface {\n  constructor() {\n    super(DB_NAME, DB_VERSION);\n  }\n\n  onDBUpgrade(db: IDBDatabase, evt: IDBVersionChangeEvent) {\n    if (evt.oldVersion < 1) {\n      // New IDB instance\n      var objectStore = db.createObjectStore(FCM_TOKEN_OBJ_STORE, {\n        keyPath: 'swScope'\n      });\n\n      // Make sure the sender ID can be searched\n      objectStore.createIndex('fcmSenderId', 'fcmSenderId', {\n        unique: false\n      });\n\n      objectStore.createIndex('fcmToken', 'fcmToken', {\n        unique: true\n      });\n    }\n\n    if (evt.oldVersion < 2) {\n      // Prior to version 2, we were using either 'fcm_token_details_db'\n      // or 'undefined' as the database name due to bug in the SDK\n      // So remove the old tokens and databases.\n      cleanV1();\n    }\n  }\n\n  /**\n   * This method takes an object and will check for known arguments and\n   * validate the input.\n   * @private\n   * @param {!ValidateInput} input\n   * @return {!Promise} Returns promise that resolves if input is valid,\n   * rejects otherwise.\n   */\n  async validateInputs_(input) {\n    if (input.fcmToken) {\n      if (typeof input.fcmToken !== 'string' || input.fcmToken.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_TOKEN)\n        );\n      }\n    }\n\n    if (input.swScope) {\n      if (typeof input.swScope !== 'string' || input.swScope.length === 0) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SCOPE)\n        );\n      }\n    }\n\n    if (input.vapidKey) {\n      if (\n        !(input.vapidKey instanceof Uint8Array) ||\n        input.vapidKey.length !== 65\n      ) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY)\n        );\n      }\n    }\n\n    if (input.subscription) {\n      if (!(input.subscription instanceof PushSubscription)) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION)\n        );\n      }\n    }\n\n    if (input.fcmSenderId) {\n      if (\n        typeof input.fcmSenderId !== 'string' ||\n        input.fcmSenderId.length === 0\n      ) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_SENDER_ID)\n        );\n      }\n    }\n\n    if (input.fcmPushSet) {\n      if (\n        typeof input.fcmPushSet !== 'string' ||\n        input.fcmPushSet.length === 0\n      ) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.BAD_PUSH_SET)\n        );\n      }\n    }\n  }\n\n  /**\n   * Given a token, this method will look up the details in indexedDB.\n   * @param {string} fcmToken\n   * @return {Promise<Object>} The details associated with that token.\n   */\n  getTokenDetailsFromToken(fcmToken) {\n    if (!fcmToken) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n    }\n\n    return this.validateInputs_({ fcmToken })\n      .then(() => {\n        return this.openDatabase();\n      })\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const index = objectStore.index('fcmToken');\n          const request = index.get(fcmToken);\n          request.onerror = function(event) {\n            reject((<IDBRequest>event.target).error);\n          };\n          request.onsuccess = function(event) {\n            const result = (<IDBRequest>event.target).result\n              ? (<IDBRequest>event.target).result\n              : null;\n            resolve(result);\n          };\n        });\n      });\n  }\n\n  /**\n   * Given a service worker scope, this method will look up the details in\n   * indexedDB.\n   * @public\n   * @param {string} swScope\n   * @return {Promise<Object>} The details associated with that token.\n   */\n  getTokenDetailsFromSWScope(swScope) {\n    if (!swScope) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    return this.validateInputs_({ swScope })\n      .then(() => {\n        return this.openDatabase();\n      })\n      .then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction([FCM_TOKEN_OBJ_STORE]);\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const scopeRequest = objectStore.get(swScope);\n          scopeRequest.onerror = event => {\n            reject((<IDBRequest>event.target).error);\n          };\n\n          scopeRequest.onsuccess = event => {\n            const result = (<IDBRequest>event.target).result\n              ? (<IDBRequest>event.target).result\n              : null;\n            resolve(result);\n          };\n        });\n      });\n  }\n\n  /**\n   * Save the details for the fcm token for re-use at a later date.\n   * @param {{swScope: !string, vapidKey: !string,\n   * subscription: !PushSubscription, fcmSenderId: !string, fcmToken: !string,\n   * fcmPushSet: !string}} input A plain js object containing args to save.\n   * @return {Promise<void>}\n   */\n  saveTokenDetails({\n    swScope,\n    vapidKey,\n    subscription,\n    fcmSenderId,\n    fcmToken,\n    fcmPushSet\n  }) {\n    if (!swScope) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_SCOPE));\n    }\n\n    if (!vapidKey) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_VAPID_KEY)\n      );\n    }\n\n    if (!subscription) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SUBSCRIPTION)\n      );\n    }\n\n    if (!fcmSenderId) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_SENDER_ID)\n      );\n    }\n\n    if (!fcmToken) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.BAD_TOKEN));\n    }\n\n    if (!fcmPushSet) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.BAD_PUSH_SET)\n      );\n    }\n\n    return this.validateInputs_({\n      swScope,\n      vapidKey,\n      subscription,\n      fcmSenderId,\n      fcmToken,\n      fcmPushSet\n    })\n      .then(() => {\n        return this.openDatabase();\n      })\n      .then(db => {\n        /**\n         * @dict\n         */\n        const details = {\n          swScope: swScope,\n          vapidKey: arrayBufferToBase64(vapidKey),\n          endpoint: subscription.endpoint,\n          auth: arrayBufferToBase64(subscription['getKey']('auth')),\n          p256dh: arrayBufferToBase64(subscription['getKey']('p256dh')),\n          fcmSenderId: fcmSenderId,\n          fcmToken: fcmToken,\n          fcmPushSet: fcmPushSet,\n          createTime: Date.now()\n        };\n\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_TOKEN_OBJ_STORE],\n            this.TRANSACTION_READ_WRITE\n          );\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const request = objectStore.put(details);\n          request.onerror = event => {\n            reject((<IDBRequest>event.target).error);\n          };\n          request.onsuccess = event => {\n            resolve();\n          };\n        });\n      });\n  }\n\n  /**\n   * This method deletes details of the current FCM token.\n   * It's returning a promise in case we need to move to an async\n   * method for deleting at a later date.\n   * @return {Promise<Object>} Resolves once the FCM token details have been\n   * deleted and returns the deleted details.\n   */\n  deleteToken(token: string) {\n    if (typeof token !== 'string' || token.length === 0) {\n      return Promise.reject(\n        this.errorFactory_.create(Errors.codes.INVALID_DELETE_TOKEN)\n      );\n    }\n\n    return this.getTokenDetailsFromToken(token).then(details => {\n      if (!details) {\n        throw this.errorFactory_.create(Errors.codes.DELETE_TOKEN_NOT_FOUND);\n      }\n\n      return this.openDatabase().then(db => {\n        return new Promise((resolve, reject) => {\n          const transaction = db.transaction(\n            [FCM_TOKEN_OBJ_STORE],\n            this.TRANSACTION_READ_WRITE\n          );\n          const objectStore = transaction.objectStore(FCM_TOKEN_OBJ_STORE);\n          const request = objectStore.delete(details['swScope']);\n          request.onerror = event => {\n            reject((<IDBRequest>event.target).error);\n          };\n          request.onsuccess = event => {\n            if ((<IDBRequest>event.target).result === 0) {\n              reject(\n                this.errorFactory_.create(Errors.codes.FAILED_TO_DELETE_TOKEN)\n              );\n              return;\n            }\n\n            resolve(details);\n          };\n        });\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}