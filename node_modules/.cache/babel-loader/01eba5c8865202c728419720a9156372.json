{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar Repo_1 = require(\"./Repo\");\n\nvar util_2 = require(\"./util/util\");\n\nvar parser_1 = require(\"./util/libs/parser\");\n\nvar validation_1 = require(\"./util/validation\");\n\nrequire(\"./Repo_transaction\");\n/** @const {string} */\n\n\nvar DATABASE_URL_OPTION = 'databaseURL';\n\nvar _staticInstance;\n/**\n * Creates and caches Repo instances.\n */\n\n\nvar RepoManager =\n/** @class */\nfunction () {\n  function RepoManager() {\n    /**\n     * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n     */\n    this.repos_ = {};\n    /**\n     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n     * @private {boolean}\n     */\n\n    this.useRestClient_ = false;\n  }\n\n  RepoManager.getInstance = function () {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n\n    return _staticInstance;\n  }; // TODO(koss): Remove these functions unless used in tests?\n\n\n  RepoManager.prototype.interrupt = function () {\n    for (var appName in this.repos_) {\n      for (var dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  };\n\n  RepoManager.prototype.resume = function () {\n    for (var appName in this.repos_) {\n      for (var dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  };\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n\n\n  RepoManager.prototype.databaseFromApp = function (app, url) {\n    var dbUrl = url || app.options[DATABASE_URL_OPTION];\n\n    if (dbUrl === undefined) {\n      util_2.fatal(\"Can't determine Firebase Database URL.  Be sure to include \" + DATABASE_URL_OPTION + ' option when calling firebase.initializeApp().');\n    }\n\n    var parsedUrl = parser_1.parseRepoInfo(dbUrl);\n    var repoInfo = parsedUrl.repoInfo;\n    validation_1.validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n\n    if (!parsedUrl.path.isEmpty()) {\n      util_2.fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n    }\n\n    var repo = this.createRepo(repoInfo, app);\n    return repo.database;\n  };\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n\n\n  RepoManager.prototype.deleteRepo = function (repo) {\n    var appRepos = util_1.safeGet(this.repos_, repo.app.name); // This should never happen...\n\n    if (!appRepos || util_1.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      util_2.fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n    }\n\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  };\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n\n\n  RepoManager.prototype.createRepo = function (repoInfo, app) {\n    var appRepos = util_1.safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    var repo = util_1.safeGet(appRepos, repoInfo.toURLString());\n\n    if (repo) {\n      util_2.fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n\n    repo = new Repo_1.Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n  };\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n\n\n  RepoManager.prototype.forceRestClient = function (forceRestClient) {\n    this.useRestClient_ = forceRestClient;\n  };\n\n  return RepoManager;\n}();\n\nexports.RepoManager = RepoManager;","map":{"version":3,"sources":["../src/core/RepoManager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName in this.repos_) {\n      for (const dbUrl in this.repos_[appName]) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(app: FirebaseApp, url?: string): Database {\n    const dbUrl: string = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.initializeApp().'\n      );\n    }\n\n    const parsedUrl = parseRepoInfo(dbUrl);\n    const repoInfo = parsedUrl.repoInfo;\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(repoInfo: RepoInfo, app: FirebaseApp): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}