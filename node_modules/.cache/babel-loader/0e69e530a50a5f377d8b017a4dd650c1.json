{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RangedFilter_1 = require(\"./RangedFilter\");\n\nvar ChildrenNode_1 = require(\"../../snap/ChildrenNode\");\n\nvar Node_1 = require(\"../../snap/Node\");\n\nvar util_1 = require(\"@firebase/util\");\n\nvar Change_1 = require(\"../Change\");\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\n\n\nvar LimitedFilter =\n/** @class */\nfunction () {\n  /**\n   * @param {!QueryParams} params\n   */\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter_1.RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new Node_1.NamedNode(key, newChild))) {\n      newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        var count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n\n          cmp = function (a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        var count = 0;\n        var foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n\n\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n\n      cmp = function (a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    var oldEventCache = snap;\n    util_1.assert(oldEventCache.numChildren() == this.limit_, '');\n    var newChildNamedNode = new Node_1.NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change_1.Change.childChangedChange(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(childKey, oldChildSnap));\n        }\n\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n\n  return LimitedFilter;\n}();\n\nexports.LimitedFilter = LimitedFilter;","map":{"version":3,"sources":["../src/core/view/filter/LimitedFilter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          let next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          let inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() == this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}